% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{fundoc}
\alias{fundoc}
\title{Generate documentation from R scripts}
\usage{
fundoc(
  scripts = ".",
  out_dir = "docs",
  proj_name = NULL,
  proj_title = NULL,
  version = NULL,
  quiet = FALSE
)
}
\arguments{
\item{scripts}{A character vector of paths. The vector can be a mix of either
(1) directory paths, (2) file paths, or (3) glob expressions to
R scripts. Note that (2) and (3) must end with \code{.R} or \code{.r}.
See \code{\link[=expand_Rscript]{expand_Rscript()}} for details.}

\item{proj_name}{Character. The name of the project. Must conform to
conventions of naming R packages. To check whether a name is valid,
refer to \url{https://github.com/r-lib/available}. Defaults to \code{NULL},
which generates the name \verb{Foo.\{YYYY.MM.DD\}} according to the current
date.}

\item{proj_title}{Character. A one-sentence title of what the project does.
Defaults to \code{NULL}, which generates a title of the format:
\verb{Function documentation of project \{proj_name\}}.}

\item{version}{Character. Version number of the project. Defaults to
\code{"0.0.1"} when set to \code{NULL}.}

\item{quiet}{Logical. Whether to hide messages from the subprocess compiling
the function documentation. Defaults to \code{FALSE}.}

\item{outdir}{Path to the generated documentation directory.}
}
\description{
Generate documentation from R scripts
}
\examples{
Rscript = "
#' A Foo function
#'
#' Just an example
#'
#' @param x Character. Calling `foo()` prints out `x`.
#' @export
#' @examples
#' foo('Hello World!')
foo <- function(x) print(x)
"
tmp <- paste0(tempfile(), ".R")
writeLines(Rscript, tmp)

fundoc(scripts = tmp,
       out_dir = "docs",
       proj_name = "fundoc",
       proj_title = "Quick and Dirty Function Documentation",
       quiet = TRUE)
}
